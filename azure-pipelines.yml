stages:
- stage: 'commit'
  jobs:
    - job: buildAndTest
      pool:
        vmImage: 'vs2017-win2016'
      steps:

      - task: NodeTool@0 
        inputs:
          versionSpec: '8.x'

      - task: Npm@1
        inputs:
          command: 'install'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'test'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'build'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/TEST-RESULTS.xml'

      - task: PublishCodeCoverageResults@1
        inputs: 
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          includeRootFolder: false
          
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
          
- stage: 'acceptance'
  dependsOn: 'commit'
  condition: succeeded()
  jobs:
      # job dev deploy!
    - job: dev
      pool:
        vmImage: 'vs2017-win2016'
      #dependsOn: 'buildandtest'
      steps:
      
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '$(System.ArtifactsDirectory)/**/*.zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)'
          cleanDestinationFolder: false

      - task: VisualStudioTestPlatformInstaller@1
        inputs:
          packageFeedSelector: 'nugetOrg'
          versionSelector: 'latestStable'

      - task: VSTest@2
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: '**\*Test*.dll
            **\bin\debug\*test*.dll
            !**\*TestAdapter.dll
            !**\obj\**'
          searchFolder: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)'
          uiTests: true
          vsTestVersion: 'toolsInstaller'
          testRunTitle: 'UITests'
      
      - task: AzureRmWebAppDeployment@3
        displayName: 'Deploy Azure App Service'
        inputs:
          azureSubscription: 'CICDserviceConnection'
          WebAppName: 'devCICDonAzure'
          Package: '$(System.ArtifactsDirectory)/drop/*.zip'
          GenerateWebConfig: true
          WebConfigParameters: '-Handler iisnode -NodeStartFile server.js -appType node'
          TakeAppOfflineFlag: true
          UseWebDeploy: true
          RenameFilesFlag: true


          
- stage: 'final'
  dependsOn: 'acceptance'
  condition: 'succeeded()'
  jobs:
      # if dev successfully completes start deployment to prod
    - job: production
      pool:
        vmImage: 'vs2017-win2016'
      steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'
      
      - task: AzureRmWebAppDeployment@3
        displayName: 'Deploy Azure App Service'
        inputs:
          azureSubscription: 'CICDserviceConnection'
          WebAppName: 'CICDonAzure'
          Package: '$(System.ArtifactsDirectory)/drop/*.zip'
          GenerateWebConfig: true
          WebConfigParameters: '-Handler iisnode -NodeStartFile server.js -appType node'
          TakeAppOfflineFlag: true
          UseWebDeploy: true
          RenameFilesFlag: true
